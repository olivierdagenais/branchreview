<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SoftwareNinjas.Core</name>
    </assembly>
    <members>
        <member name="T:SoftwareNinjas.Core.AssemblyExtensions">
            <summary>
            Extension methods to augment the <see cref="T:System.Reflection.Assembly"/> class.
            </summary>
        </member>
        <member name="M:SoftwareNinjas.Core.AssemblyExtensions.GetCustomAttribute``1(System.Reflection.Assembly)">
            <summary>
            Convenience method to obtain the first (and usually only) assembly-level attribute of type
            <typeparamref name="T"/> from the specified <paramref name="assembly"/>.
            </summary>
            
            <typeparam name="T">
            The type of an <see cref="T:System.Attribute"/> known (or thought) to be applied at the assembly level.
            </typeparam>
            
            <param name="assembly">
            The <see cref="T:System.Reflection.Assembly"/> to query for an attribute of type <typeparamref name="T"/>.
            </param>
            
            <returns>
            An instance of <typeparamref name="T"/> representing the applied attribute if such an attribute was found;
            <see langword="null"/> otherwise.
            </returns>
        </member>
        <member name="M:SoftwareNinjas.Core.AssemblyExtensions.GenerateHeader(System.Reflection.Assembly)">
            <summary>
            Combines a few attributes decorating the provided <paramref name="assembly"/> into a descriptive string to
            inform end-users about the product, version, copyright and registered user.
            </summary>
            
            <param name="assembly">
            The <see cref="T:System.Reflection.Assembly"/> to query.
            </param>
            
            <returns>
            A user-friendly string representing two lines of text.
            </returns>
        </member>
        <member name="T:SoftwareNinjas.Core.EnumerableExtensions">
            <summary>
            Extension methods to augment implementations of <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:SoftwareNinjas.Core.EnumerableExtensions.Compose``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Simulates extending an <see cref="T:System.Collections.Generic.IEnumerable`1"/> with an extra item at the beginning.
            </summary>
            
            <typeparam name="T">
            The type of elements to enumerate.
            </typeparam>
            
            <param name="firstItem">
            The item to enumerate first.
            </param>
            
            <param name="items">
            The items to enumerate after <paramref name="firstItem"/>.
            </param>
            
            <returns>
            An enumeration of <paramref name="firstItem"/> and then all the items in <paramref name="items"/>.
            </returns>
        </member>
        <member name="M:SoftwareNinjas.Core.EnumerableExtensions.Compose``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Simulates extending an <see cref="T:System.Collections.Generic.IEnumerable`1"/> with an extra item at the end.
            </summary>
            
            <typeparam name="T">
            The type of elements to enumerate.
            </typeparam>
            
            <param name="items">
            The items to enumerate before <paramref name="lastItem"/>.
            </param>
            
            <param name="lastItem">
            The item to enumerate last.
            </param>
            
            <returns>
            An enumeration of all the items in <paramref name="items"/> and then <paramref name="lastItem"/>.
            </returns>
        </member>
        <member name="M:SoftwareNinjas.Core.EnumerableExtensions.Compose``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Simulates extending an <see cref="T:System.Collections.Generic.IEnumerable`1"/> with another so that a single loop may be used over two
            sources of <typeparamref name="T"/>.
            </summary>
            
            <typeparam name="T">
            The type of elements to enumerate.
            </typeparam>
            
            <param name="firstItems">
            The items to enumerate first.
            </param>
            
            <param name="lastItems">
            The items to enumerate last.
            </param>
            
            <returns>
            An enumeration of all the items in <paramref name="firstItems"/> and then all those in
            <paramref name="lastItems"/>.
            </returns>
        </member>
        <member name="M:SoftwareNinjas.Core.EnumerableExtensions.Join``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Concatenates a specified separator <see cref="T:System.String"/> between each element of a specified
            <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <typeparamref name="T"/>, yielding a single concatenated string. 
            </summary>
            
            <param name="values">
            Zero or more <typeparamref name="T"/> items, such as an array of <see cref="T:System.String"/>.
            </param>
            
            <param name="separator">
            A <see cref="T:System.String"/> to insert in between all the <see cref="T:System.String"/> representations of the instances in
            <paramref name="values"/>.
            </param>
            
            <typeparam name="T">
            The type of items in <paramref name="values"/>.
            </typeparam>
            
            <returns>
            A <see cref="T:System.String"/> consisting of the elements of <paramref name="values"/> interspersed with the
            <paramref name="separator"/> string.
            </returns>
            
            <seealso cref="M:System.String.Join(System.String,System.String[])"/>
        </member>
        <member name="M:SoftwareNinjas.Core.EnumerableExtensions.Join``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{``0,System.String})">
            <summary>
            Concatenates a specified separator <see cref="T:System.String"/> between each element of a specified
            <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <typeparamref name="T"/> - which are transformed to <see cref="T:System.String"/>
            instances by the specified <paramref name="stringifier"/>, yielding a single concatenated string. 
            </summary>
            
            <param name="values">
            Zero or more <typeparamref name="T"/> items, such as an array of <see cref="T:System.String"/>.
            </param>
            
            <param name="separator">
            A <see cref="T:System.String"/> to insert in between all the <see cref="T:System.String"/> representations of the instances in
            <paramref name="values"/>.
            </param>
            
            <param name="stringifier">
            The functor to use to convert <typeparamref name="T"/> instances to <see cref="T:System.String"/> instances.  Useful
            for using an <see cref="T:System.IFormatProvider"/> or for applying extra processing to the strings before they are
            joined.
            </param>
            
            <typeparam name="T">
            The type of items in <paramref name="values"/>.
            </typeparam>
            
            <returns>
            A <see cref="T:System.String"/> consisting of the elements of <paramref name="values"/> converted to strings by
            <paramref name="stringifier"/> and interspersed with the <paramref name="separator"/> string.
            </returns>
            
            <seealso cref="M:System.String.Join(System.String,System.String[])"/>
        </member>
        <member name="M:SoftwareNinjas.Core.EnumerableExtensions.QuoteForShell``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Prepares a single <see cref="T:System.String"/> representing all the <paramref name="values"/> quoted as necessary
            for use when invoking a sub-process.
            </summary>
            
            <param name="values">
            Zero or more values to assemble into a single string.
            </param>
            
            <typeparam name="T">
            The type of items in <paramref name="values"/>.
            </typeparam>
            
            <returns>
            All the <paramref name="values"/> converted to <see cref="T:System.String"/>, quoted if they contained a space and
            separated by spaces.
            </returns>
        </member>
        <member name="T:SoftwareNinjas.Core.Pair`2">
            <summary>
            Provides a basic utility class that is used to store two related items.
            </summary>
            
            <typeparam name="F">
            The type of the first item.
            </typeparam>
            
            <typeparam name="S">
            The type of the second item.
            </typeparam>
            
            <seealso href="http://msdn.microsoft.com/en-us/library/system.web.ui.pair.aspx">System.Web.UI.Pair</seealso>
        </member>
        <member name="M:SoftwareNinjas.Core.Pair`2.#ctor(`0,`1)">
            <summary>
            Initializes an instance of the <see cref="T:SoftwareNinjas.Core.Pair`2"/> class, using the specified item pair.
            </summary>
            
            <param name="first">
            The first item to set.
            </param>
            
            <param name="second">
            The second item to set.
            </param>
        </member>
        <member name="P:SoftwareNinjas.Core.Pair`2.First">
            <summary>
            The first item.
            </summary>
        </member>
        <member name="P:SoftwareNinjas.Core.Pair`2.Second">
            <summary>
            The second item.
            </summary>
        </member>
        <member name="T:System.Action">
            <summary>
            Encapsulates a method that takes no parameters and does not return a value.
            </summary>
        </member>
        <member name="T:System.Action`2">
            <summary>
            Encapsulates a method that has two parameters and does not return a value.
            </summary>
            
            <typeparam name="T1">
            The type of the first parameter of the method that this delegate encapsulates.
            </typeparam>
            
            <typeparam name="T2">
            The type of the second parameter of the method that this delegate encapsulates.
            </typeparam>
            
            <param name="arg1">
            The first parameter of the method that this delegate encapsulates.
            </param>
            
            <param name="arg2">
            The second parameter of the method that this delegate encapsulates.
            </param>
        </member>
        <member name="T:System.Action`3">
            <summary>
            Encapsulates a method that takes three parameters and does not return a value.
            </summary>
            
            <typeparam name="T1">
            The type of the first parameter of the method that this delegate encapsulates.
            </typeparam>
            
            <typeparam name="T2">
            The type of the second parameter of the method that this delegate encapsulates.
            </typeparam>
            
            <typeparam name="T3">
            The type of the third parameter of the method that this delegate encapsulates.
            </typeparam>
            
            <param name="arg1">
            The first parameter of the method that this delegate encapsulates.
            </param>
            
            <param name="arg2">
            The second parameter of the method that this delegate encapsulates.
            </param>
            
            <param name="arg3">
            The third parameter of the method that this delegate encapsulates.
            </param>
        </member>
        <member name="T:System.Action`4">
            <summary>
            Encapsulates a method that has four parameters and does not return a value.
            </summary>
            
            <typeparam name="T1">
            The type of the first parameter of the method that this delegate encapsulates.
            </typeparam>
            
            <typeparam name="T2">
            The type of the second parameter of the method that this delegate encapsulates.
            </typeparam>
            
            <typeparam name="T3">
            The type of the third parameter of the method that this delegate encapsulates.
            </typeparam>
            
            <typeparam name="T4">
            The type of the fourth parameter of the method that this delegate encapsulates.
            </typeparam>
            
            <param name="arg1">
            The first parameter of the method that this delegate encapsulates.
            </param>
            
            <param name="arg2">
            The second parameter of the method that this delegate encapsulates.
            </param>
            
            <param name="arg3">
            The third parameter of the method that this delegate encapsulates.
            </param>
            
            <param name="arg4">
            The fourth parameter of the method that this delegate encapsulates.
            </param>
        </member>
        <member name="T:System.Func`1">
            <summary>
            Encapsulates a method that has no parameters and returns a value of the type specified by the
            <typeparamref name="TResult"/> parameter.
            </summary>
            
            <typeparam name="TResult">
            The type of the return value of the method that this delegate encapsulates.
            </typeparam>
            
            <returns>
            The return value of the method that this delegate encapsulates.
            </returns>
        </member>
        <member name="T:System.Func`2">
            <summary>
            Encapsulates a method that has one parameter and returns a value of the type specified by the
            <typeparamref name="TResult"/> parameter.
            </summary>
            
            <typeparam name="T1">
            The type of the parameter of the method that this delegate encapsulates.
            </typeparam>
            
            <typeparam name="TResult">
            The type of the return value of the method that this delegate encapsulates.
            </typeparam>
            
            <param name="arg">
            The parameter of the method that this delegate encapsulates.
            </param>
            
            <returns>
            The return value of the method that this delegate encapsulates.
            </returns>
        </member>
        <member name="T:System.Func`3">
            <summary>
            Encapsulates a method that has two parameters and returns a value of the type specified by the
            <typeparamref name="TResult"/> parameter.
            </summary>
            
            <typeparam name="T1">
            The type of the first parameter of the method that this delegate encapsulates.
            </typeparam>
            
            <typeparam name="T2">
            The type of the second parameter of the method that this delegate encapsulates.
            </typeparam>
            
            <typeparam name="TResult">
            The type of the return value of the method that this delegate encapsulates.
            </typeparam>
            
            <param name="arg1">
            The first parameter of the method that this delegate encapsulates.
            </param>
            
            <param name="arg2">
            The second parameter of the method that this delegate encapsulates.
            </param>
            
            <returns>
            The return value of the method that this delegate encapsulates.
            </returns>
        </member>
        <member name="T:System.Func`4">
            <summary>
            Encapsulates a method that has three parameters and returns a value of the type specified by the
            <typeparamref name="TResult"/> parameter.
            </summary>
            
            <typeparam name="T1">
            The type of the first parameter of the method that this delegate encapsulates.
            </typeparam>
            
            <typeparam name="T2">
            The type of the second parameter of the method that this delegate encapsulates.
            </typeparam>
            
            <typeparam name="T3">
            The type of the third parameter of the method that this delegate encapsulates.
            </typeparam>
            
            <typeparam name="TResult">
            The type of the return value of the method that this delegate encapsulates.
            </typeparam>
            
            <param name="arg1">
            The first parameter of the method that this delegate encapsulates.
            </param>
            
            <param name="arg2">
            The second parameter of the method that this delegate encapsulates.
            </param>
            
            <param name="arg3">
            The third parameter of the method that this delegate encapsulates.
            </param>
            
            <returns>
            The return value of the method that this delegate encapsulates.
            </returns>
        </member>
        <member name="T:System.Func`5">
            <summary>
            Encapsulates a method that has four parameters and returns a value of the type specified by the
            <typeparamref name="TResult"/> parameter.
            </summary>
            
            <typeparam name="T1">
            The type of the first parameter of the method that this delegate encapsulates.
            </typeparam>
            
            <typeparam name="T2">
            The type of the second parameter of the method that this delegate encapsulates.
            </typeparam>
            
            <typeparam name="T3">
            The type of the third parameter of the method that this delegate encapsulates.
            </typeparam>
            
            <typeparam name="T4">
            The type of the fourth parameter of the method that this delegate encapsulates.
            </typeparam>
            
            <typeparam name="TResult">
            The type of the return value of the method that this delegate encapsulates.
            </typeparam>
            
            <param name="arg1">
            The first parameter of the method that this delegate encapsulates.
            </param>
            
            <param name="arg2">
            The second parameter of the method that this delegate encapsulates.
            </param>
            
            <param name="arg3">
            The third parameter of the method that this delegate encapsulates.
            </param>
            
            <param name="arg4">
            The fourth parameter of the method that this delegate encapsulates.
            </param>
            
            <returns>
            The return value of the method that this delegate encapsulates.
            </returns>
        </member>
        <member name="T:System.Runtime.CompilerServices.ExtensionAttribute">
            <summary>
            Enable C# 3.0 extensions without referencing System.Core.dll
            </summary>
            
            <seealso href="http://www.danielmoth.com/Blog/2007/05/using-extension-methods-in-fx-20.html"/>
            <seealso href="http://social.msdn.microsoft.com/forums/en-US/vcsharp2008prerelease/thread/9d88f8b1-ff03-4ea6-bd41-8cca9f2cd485/"/>
        </member>
        <member name="T:SoftwareNinjas.Core.RegisteredUserAttribute">
            <summary>
            Represents data about the user for which an assembly was compiled.
            </summary>
        </member>
        <member name="M:SoftwareNinjas.Core.RegisteredUserAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SoftwareNinjas.Core.RegisteredUserAttribute"/> class with the specified
            human-readable version of the user's name and their e-mail address.
            </summary>
            
            <param name="displayName">
            The full name of the user who registered the software.
            </param>
            
            <param name="emailAddress">
            The e-mail addressed used when registering the assembly.
            </param>
        </member>
        <member name="M:SoftwareNinjas.Core.RegisteredUserAttribute.ExtractFrom(System.Reflection.Assembly)">
            <summary>
            Initializes a new instance of the <see cref="T:SoftwareNinjas.Core.RegisteredUserAttribute"/> class based on its use in the
            specified assembly.
            </summary>
            
            <param name="assembly">
            The <see cref="T:System.Reflection.Assembly"/> in which to search for the attribute.
            </param>
            
            <returns>
            A <see cref="T:SoftwareNinjas.Core.RegisteredUserAttribute"/> from the assembly.
            </returns>
        </member>
        <member name="M:SoftwareNinjas.Core.RegisteredUserAttribute.ExtractFromCallingAssembly">
            <summary>
            Initializes a new instance of the <see cref="T:SoftwareNinjas.Core.RegisteredUserAttribute"/> class based on its use in the
            calling assembly.
            </summary>
            
            <returns>
            A <see cref="T:SoftwareNinjas.Core.RegisteredUserAttribute"/> from the calling assembly.
            </returns>
        </member>
        <member name="P:SoftwareNinjas.Core.RegisteredUserAttribute.DisplayName">
            <summary>
            The full name of the user, to be used in labels, etc.
            </summary>
        </member>
        <member name="P:SoftwareNinjas.Core.RegisteredUserAttribute.EmailAddress">
            <summary>
            The e-mail address of the user, to be used in hyperlinks, etc.
            </summary>
        </member>
        <member name="T:SoftwareNinjas.Core.Test.EnumerableExtensions">
            <summary>
            A class to test <see cref="T:SoftwareNinjas.Core.EnumerableExtensions"/>
            </summary>
        </member>
        <member name="M:SoftwareNinjas.Core.Test.EnumerableExtensions.Compose_Prefix">
            <summary>
            Tests both <see cref="M:SoftwareNinjas.Core.EnumerableExtensions.Compose``1(``0,System.Collections.Generic.IEnumerable{``0})"/>.
            </summary>
        </member>
        <member name="M:SoftwareNinjas.Core.Test.EnumerableExtensions.Compose_Suffix">
            <summary>
            Tests <see cref="M:SoftwareNinjas.Core.EnumerableExtensions.Compose``1(System.Collections.Generic.IEnumerable{``0},``0)"/>.
            </summary>
        </member>
        <member name="M:SoftwareNinjas.Core.Test.EnumerableExtensions.Compose_Append">
            <summary>
            Tests <see cref="M:SoftwareNinjas.Core.EnumerableExtensions.Compose``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})"/>.
            </summary>
        </member>
        <member name="M:SoftwareNinjas.Core.Test.EnumerableExtensions.EnumerateSame``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Convenience method for making sure two <see cref="T:System.Collections.Generic.IEnumerable`1"/> instances will enumerate identical
            items.
            </summary>
            
            <typeparam name="T">
            The type of elements to enumerate.
            </typeparam>
            
            <param name="expected">
            The expected elements.
            </param>
            
            <param name="actual">
            The actual elements.
            </param>
        </member>
        <member name="M:SoftwareNinjas.Core.Test.EnumerableExtensions.Join">
            <summary>
            Tests <see cref="M:SoftwareNinjas.Core.EnumerableExtensions.Join``1(System.Collections.Generic.IEnumerable{``0},System.String)"/>.
            </summary>
        </member>
        <member name="M:SoftwareNinjas.Core.Test.EnumerableExtensions.QuoteForShell">
            <summary>
            Tests <see cref="M:SoftwareNinjas.Core.EnumerableExtensions.QuoteForShell``1(System.Collections.Generic.IEnumerable{``0})"/>
            </summary>
        </member>
    </members>
</doc>
