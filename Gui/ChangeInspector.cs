using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using SoftwareNinjas.BranchAndReviewTools.Core;
using SoftwareNinjas.BranchAndReviewTools.Gui.Extensions;
using SoftwareNinjas.BranchAndReviewTools.Gui.Grids;
using SoftwareNinjas.Core;
using SoftwareNinjas.BranchAndReviewTools.Gui.History;

namespace SoftwareNinjas.BranchAndReviewTools.Gui
{
    public partial class ChangeInspector : UserControl, IHistoryItem
    {
        private object _context;
        private bool _restoredSplitters;

        public ChangeInspector()
        {
            InitializeComponent();
            this.Paint += OnPaint;
            ChangeLog.InitializeDefaults();
            PatchViewer.InitializeDefaults();
            PatchViewer.InitializeDiff();
            PatchViewer.KeyUp += PatchViewer_KeyUp;
            FileGrid.Grid.MultiSelect = true;
        }

        private void OnPaint(object sender, PaintEventArgs paintEventArgs)
        {
            if (!_restoredSplitters)
            {
                HorizontalDividerSplitterDistance = this.LoadSetting(() => HorizontalDividerSplitterDistance, 85);
                VerticalDividerSplitterDistance = this.LoadSetting(() => VerticalDividerSplitterDistance, 273);

                this.horizontalDivider.SplitterMoved += this.horizontalDivider_SplitterMoved;
                this.verticalDivider.SplitterMoved += this.verticalDivider_SplitterMoved;

                _restoredSplitters = true;
            }
        }

        void PatchViewer_KeyUp(object sender, KeyEventArgs e)
        {
            if (e.KeyValue == 107 || e.KeyValue == 109)
            {
                PatchViewer.NativeInterface.ToggleFold(PatchViewer.GetCurrentLineNumber());
            }
        }

        [SettingsBindable(true)]
        public int VerticalDividerSplitterDistance
        {
            get { return verticalDivider.SplitterDistance; }
            set { verticalDivider.SplitterDistance = value; }
        }

        [SettingsBindable(true)]
        public int HorizontalDividerSplitterDistance
        {
            get { return horizontalDivider.SplitterDistance; }
            set { horizontalDivider.SplitterDistance = value; }
        }

        public string PatchText
        {
            get { return PatchViewer.Text; }
            set { PatchViewer.SetReadOnlyText(value); }
        }

        public object Context {
            get { return _context; }
            set
            { 
                _context = value;
                RefreshMessage();
                RefreshFileGrid();
            }
        }

        // given a Context (the current BranchId in the "Pending Changes" case and the current revision in "Log"),
        // produces a table of the changes involved
        public Func<object, DataTable> ChangesFunction { get; set; }
        internal DataTable GetChanges(object contextId)
        {
            return contextId != null && ChangesFunction != null ? ChangesFunction(contextId) : null;
        }

        // given one or more "ID"s from the table generated by ChangesFunction, produces a patch
        public Func<object, IEnumerable<object>, string> ComputeDifferencesFunction { get; set; }
        internal string ComputeDifferences(object contextId, IEnumerable<object> selectedIds)
        {
            return contextId != null && ComputeDifferencesFunction != null
                ? ComputeDifferencesFunction(contextId, selectedIds) : String.Empty;
        }

        public Func<object, IEnumerable<object>, IList<MenuAction>> ActionsForChangesFunction { get; set; }
        internal IList<MenuAction> GetActionsForChanges(object contextId, IEnumerable<object> selectedIds)
        {
            return contextId != null && ActionsForChangesFunction != null
                ? ActionsForChangesFunction(contextId, selectedIds) : MenuAction.EmptyList;
        }

        public Func<object, string> MessageFunction { get; set; }
        internal string GetMessage(object contextId)
        {
            return contextId != null && MessageFunction != null ? MessageFunction(contextId) : null;
        }

        public void RefreshMessage()
        {
            this.StartTask(() => GetMessage(Context), UpdateMessage);
        }

        private void UpdateMessage(Task<string> task)
        {
            if (!task.IsFaulted)
            {
                var message = task.Result;
                if (message != null)
                {
                    if (this.ChangeLog.IsReadOnly)
                    {    
                        this.ChangeLog.SetReadOnlyText(message);
                    }
                    else
                    {
                        this.ChangeLog.Text = message;
                    }
                }
            }
        }

        #region FileGrid
        public void RefreshFileGrid()
        {
            this.StartTask(() => GetChanges(Context), LoadFileGrid);
        }

        private void LoadFileGrid(Task<DataTable> task)
        {
            if (!task.IsFaulted)
            {
                FileGrid.DataTable = task.Result;
                var itemCount = FileGrid.Grid.Rows.Count;
                if (0 == itemCount)
                {
                    PatchText = String.Empty;
                }
                FileGrid.Caption = "{0} changed item{1}".FormatInvariant(itemCount, itemCount == 1 ? "" : "s");
            }
        }

        void FileGrid_ContextMenuStripNeeded(object sender, ContextMenuNeededEventArgs e)
        {
            var menu = BuildChangedFilesActionMenu();
            e.ContextMenu = menu;
        }

        void FileGrid_SelectionChanged(object sender, EventArgs e)
        {
            var selectedIds = FileGrid.FindSelectedIds().ToList();
            this.StartTask(() => ComputeDifferences(Context, selectedIds), UpdatePatchText);
        }

        private void UpdatePatchText(Task<string> task)
        {
            if (!task.IsFaulted)
            {
                PatchText = task.Result;
            }
        }

        private ContextMenu BuildChangedFilesActionMenu()
        {
            var selectedIds = FileGrid.FindSelectedIds();
            var actions = GetActionsForChanges(Context, selectedIds);
            var menu = new ContextMenu();
            menu.MenuItems.AddActions(actions);
            return menu;
        }

        private void InvokeDefaultChangedFilesAction()
        {
            var menu = BuildChangedFilesActionMenu();
            menu.MenuItems.InvokeFirstMenuItem();
        }

        void FileGrid_RowInvoked(object sender, EventArgs e)
        {
            InvokeDefaultChangedFilesAction();
        }
        #endregion

        private void horizontalDivider_SplitterMoved(object sender, SplitterEventArgs e)
        {
            this.SaveSetting(() => HorizontalDividerSplitterDistance);
        }

        private void verticalDivider_SplitterMoved(object sender, SplitterEventArgs e)
        {
            this.SaveSetting(() => VerticalDividerSplitterDistance);
        }

        #region IHistoryItem Members

        public new IHistoryContainer Container { get; set; }

        Control IHistoryItem.Control { get { return this; } }

        public string Title { get; set; }

        public void Reload()
        {
            RefreshFileGrid();
        }

        #endregion
    }
}
