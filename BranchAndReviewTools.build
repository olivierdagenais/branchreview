<?xml version="1.0" encoding="utf-8" ?>
<project name="Branch And Review Tools" default="deploy"
    xmlns="http://branchreview.googlecode.com/schemas/nant.xsd"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://branchreview.googlecode.com/schemas/nant.xsd Tools/NAnt.xsd">

    <loadtasks assembly="Tools/nantcontrib/bin/NAnt.Contrib.Tasks.dll" />
    <loadtasks assembly="Tools/TextileNET/Textile.NAnt.dll" />
    <loadtasks assembly="Tools/SoftwareNinjas.NAnt.dll" />

    <property name="configuration" value="Debug" overwrite="false" />
    <property name="projects" value="Console,Core,SvnExe" />

    <target name="schema">
        <nantschema output="Tools/NAnt.xsd" target-ns="http://branchreview.googlecode.com/schemas/nant.xsd"/>
        <echo message="Don't forget to patch back the NDoc section!"/>
    </target>

    <target name="clean">
        <clean projects="${projects}" configuration="${configuration}" />
    </target>

    <target name="customize" depends="clean">
        <if test="${
            environment::variable-exists('BUILD_NUMBER')
        and environment::variable-exists('REGISTERED_USER_DISPLAY_NAME')
        and environment::variable-exists('REGISTERED_USER_EMAIL_ADDRESS')
        }">
            <foreach item="String" in="${projects}" delim="," property="project">
                <delete file="${project}/Properties/CustomInfo.cs" />
                <style style="Tools/CustomInfo_cs.xsl" in="Version.xml"
                       out="${project}/Properties/CustomInfo.cs">
                    <parameters>
                        <parameter namespaceuri=""
                                   name="buildNumber"
                                   value="${environment::get-variable('BUILD_NUMBER')}"/>
                        <parameter namespaceuri=""
                                   name="registeredUserDisplayName"
                                   value="${environment::get-variable('REGISTERED_USER_DISPLAY_NAME')}"/>
                        <parameter namespaceuri=""
                                   name="registeredUserEmailAddress"
                                   value="${environment::get-variable('REGISTERED_USER_EMAIL_ADDRESS')}"/>
                    </parameters>
                </style>
            </foreach>
        </if>
    </target>

    <target name="compile" depends="customize">
        <msbuild project="BranchAndReviewTools.sln">
            <arg value="/property:Configuration=${configuration}" />
            <arg value="/verbosity:minimal" />
        </msbuild>
    </target>

    <target name="test" depends="compile">
        <foreach item="String" in="${projects}" delim="," property="project">
            <echo message="Testing ${project}..."/>
            <nunit2>
                <formatter type="Plain" />
                <test>
                    <assemblies>
                        <include name="${project}/bin/${configuration}/SoftwareNinjas.BranchAndReviewTools.${project}.dll" />
                        <include name="${project}/bin/${configuration}/SoftwareNinjas.BranchAndReviewTools.${project}.exe" />
                    </assemblies>
                </test>
            </nunit2>
            <!-- TODO: verify assemblies with FxCop -->
        </foreach>
    </target>

    <target name="documentation" depends="test">
        <textile todir="Documentation">
            <fileset basedir="Wiki">
                <include name="**/*.wiki"/>
            </fileset>
        </textile>
        <property name="workingdir" value="Documentation/MSDN" />
        <property name="castle" value="Tools/Sandcastle" />
        <mkdir dir="${workingdir}" />
        <property name="outputFileName" value="SoftwareNinjas.BranchAndReviewTools"/>
        <mkdir dir="${workingdir}/comments" />
        <foreach item="String" in="${projects}" delim="," property="project">
            <copy file="${project}/bin/${configuration}/SoftwareNinjas.BranchAndReviewTools.${project}.xml"
                todir="${workingdir}/comments/" />
        </foreach>
        <echo>
Scanning assemblies using reflection...</echo>
        <exec program="${castle}/ProductionTools/MrefBuilder.exe" workingdir="${workingdir}">
            <environment><variable name="DXROOT" dir="${castle}" /></environment>
            <arg file="Console/bin/${configuration}/SoftwareNinjas.BranchAndReviewTools.Console.exe" />
            <arg file="Core/bin/${configuration}/SoftwareNinjas.BranchAndReviewTools.Core.dll" />
            <arg file="SvnExe/bin/${configuration}/SoftwareNinjas.BranchAndReviewTools.SvnExe.dll" />
            <arg value="/out:reflection.org" />
            <arg value="/internal+" />
            <!-- TODO: add /dep: switches for the project's dependencies -->
        </exec>
        <echo>
Applying transforms...</echo>
        <exec program="${castle}/ProductionTools/XslTransform.exe" workingdir="${workingdir}">
            <environment><variable name="DXROOT" dir="${castle}" /></environment>
            <arg value="/xsl:../../${castle}/ProductionTransforms/ApplyVSDocModel.xsl" />
            <arg value="reflection.org" />
            <arg value="/xsl:../../${castle}/ProductionTransforms/AddFriendlyFilenames.xsl" />
            <arg value="/out:reflection.xml" />
            <arg value="/arg:IncludeAllMembersTopic=false" />
            <arg value="/arg:IncludeInheritedOverloadTopics=true" />
        </exec>
        <echo>
Creating manifest...</echo>
        <exec program="${castle}/ProductionTools/XslTransform.exe" workingdir="${workingdir}">
            <environment><variable name="DXROOT" dir="${castle}" /></environment>
            <arg value="/xsl:../../${castle}/ProductionTransforms/ReflectionToManifest.xsl" />
            <arg value="reflection.xml" />
            <arg value="/out:manifest.xml" />
        </exec>
        <if test="${not directory::exists(castle + '/Data/Reflection')}">
            <!-- TODO: it does not appear that the installer includes these files and
            therefore are probably generated at install-time.
            We could do the same and avoid carrying a 9-meg file around our source tree. -->
            <echo>
Unpacking reflection data...</echo>
            <unzip zipfile="${castle}/Data/Reflection.zip" todir="${castle}/Data/Reflection" />
        </if>
        <echo>
Running BuildAssembler...</echo>
        <exec program="${castle}/ProductionTools/BuildAssembler.exe" workingdir="${workingdir}">
            <environment><variable name="DXROOT" dir="${castle}" /></environment>
            <arg value="/config:../../${castle}/Presentation/Prototype/configuration/sandcastle.config" />
            <arg value="manifest.xml" />
        </exec>
        <echo>
Generating table of contents...</echo>
        <exec program="${castle}/ProductionTools/XslTransform.exe" workingdir="${workingdir}">
            <environment><variable name="DXROOT" dir="${castle}" /></environment>
            <arg value="/xsl:../../${castle}/ProductionTransforms/CreatePrototypeToc.xsl" />
            <arg value="reflection.xml" />
            <arg value="/out:toc.xml" />
        </exec>
        <echo>
Copying CHM files...</echo>
        <copy todir="${workingdir}/chm">
            <fileset basedir="${castle}/Presentation/Prototype">
                <include name="icons/**" />
                <include name="scripts/**" />
                <include name="styles/**" />
            </fileset>
        </copy>
        <echo>
Building CHM project...</echo>
        <exec program="${castle}/ProductionTools/ChmBuilder.exe" workingdir="${workingdir}">
            <environment><variable name="DXROOT" dir="${castle}" /></environment>
            <arg value="/project:${outputFileName}" />
            <arg value="/html:Output/html" />
            <arg value="/lcid:1033" />
            <arg value="/toc:Toc.xml" />
            <arg value="/out:chm" />
        </exec>
        <echo>
Working around lack of Unicode support...</echo>
        <exec program="${castle}/ProductionTools/DBCSFix.exe" workingdir="${workingdir}">
            <environment><variable name="DXROOT" dir="${castle}" /></environment>
            <arg value="/d:chm" />
            <arg value="/l:1033" />
        </exec>
        <delete file="${workingdir}/chm/${outputFileName}.hhp.utf8" failonerror="false" />
        <move file="${workingdir}/chm/${outputFileName}.hhp"
            tofile="${workingdir}/chm/${outputFileName}.hhp.utf8" />
        <copy file="${workingdir}/chm/${outputFileName}.hhp.utf8"
            tofile="${workingdir}/chm/${outputFileName}.hhp" outputencoding="ASCII" />
        <echo>
Compiling CHM project...</echo>
        <readregistry key="Software\Microsoft\Windows\CurrentVersion\App Paths\hhw.exe\Path" property="HhwDir" />
        <exec program="${HhwDir}\hhc.exe" workingdir="${workingdir}" failonerror="false" resultproperty="retCode">
            <arg value="chm\${outputFileName}.hhp" />
        </exec>
        <fail if="${retCode != '1'}" message="HTML Help Compiler failure" />
        <delete file="Documentation/${outputFileName}.chm" failonerror="false"/>
        <move file="Documentation/MSDN/chm/${outputFileName}.chm" tofile="Documentation/${outputFileName}.chm" />
        <delete dir="Documentation/MSDN" />
    </target>

    <target name="deploy" depends="documentation">
        <xmlpeek file="Version.xml" xpath="/version/@major" property="major" />
        <xmlpeek file="Version.xml" xpath="/version/@minor" property="minor" />
        <if test="${environment::variable-exists('BUILD_NUMBER')}">
            <property name="buildNumber" value="${environment::get-variable('BUILD_NUMBER')}"/>
        </if>
        <if test="${not environment::variable-exists('BUILD_NUMBER')}">
            <property name="buildNumber" value="private"/>
        </if>
        <property name="versionFolder" value="SoftwareNinjas.BranchAndReviewTools-${major}.${minor}.${buildNumber}"/>

        <delete dir="Deploy" failonerror="false"/>
        <mkdir dir="Deploy/${versionFolder}"/>
        <copy todir="Deploy/${versionFolder}" flatten="true">
            <fileset>
                <include name="*/bin/${configuration}/SoftwareNinjas.*.dll"/>
                <include name="*/bin/${configuration}/SoftwareNinjas.*.exe"/>
                <include name="*/bin/${configuration}/SoftwareNinjas.*.xml"/>
            </fileset>
        </copy>
        <copy todir="Deploy/${versionFolder}/doc">
            <fileset basedir="Documentation">
                <include name="**"/>
            </fileset>
        </copy>

        <zip zipfile="Deploy/${versionFolder}.zip">
            <fileset basedir="Deploy">
                <include name="${versionFolder}/**"/>
            </fileset>
        </zip>

        <!-- TODO: create installer -->
    </target>

    <target name="release">
        <property name="configuration" value="release" />
        <call target="deploy" />
    </target>
</project>
